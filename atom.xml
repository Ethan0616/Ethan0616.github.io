<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大葱油饼的博客</title>
  
  <subtitle>煎饼大葱我最爱</subtitle>
  <link href="https://ethan0616.github.io/Ethan0616.github.io/atom.xml" rel="self"/>
  
  <link href="https://ethan0616.github.io/Ethan0616.github.io/"/>
  <updated>2022-02-06T09:12:34.099Z</updated>
  <id>https://ethan0616.github.io/Ethan0616.github.io/</id>
  
  <author>
    <name>Ethan Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆向开发（一）修改进程内存</title>
    <link href="https://ethan0616.github.io/Ethan0616.github.io/2022/02/06/reios01/"/>
    <id>https://ethan0616.github.io/Ethan0616.github.io/2022/02/06/reios01/</id>
    <published>2022-02-06T09:06:01.766Z</published>
    <updated>2022-02-06T09:12:34.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向开发（一）修改进程内存"><a href="#逆向开发（一）修改进程内存" class="headerlink" title="逆向开发（一）修改进程内存"></a>逆向开发（一）修改进程内存</h1><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><p>当执行文件由操作系统运行时，就成为一个进程。<br>实际上可执行文件和处理同一个对象的不同状态，即一些数据和一组指令。我们可以将可执行文件视为静态，将进程视为动态。可执行文件在硬盘上，而进程“存储”在内存中。所以，进程包含数据和指令它们在内存中。</p><ul><li>优点： 能够及时反馈修改情况</li><li>缺点： 不能保存修改信息，应用重新加载后修改消失</li></ul><h3 id="2-虚拟内存、内存页和内存区域"><a href="#2-虚拟内存、内存页和内存区域" class="headerlink" title="2. 虚拟内存、内存页和内存区域"></a>2. 虚拟内存、内存页和内存区域</h3><p>当操作系统执行一个可执行文件时，它会将这个可执行文件从硬盘加载到内存中。<br>这个进程在内存中的哪个位置？</p><p>每个进程都有自己独立的内存空间（即进程A与B运行在不同的内存区域），这是通过内存虚拟化来实现的。大部分操作系统都是基于虚拟内存，对于像ARMv7这样的32位处理器，每个进程的虚拟内存大小是2^32=4G字节大。但是大多数进程不需要4GB来运行，它们只消耗4GB的一小部分。一个进程实际使用的内存大小称为进程的虚拟地址空间，4GB虚拟空间被划分为很多很多的内存页进行分配，而内存页是“一个固定长度（iOS/OSX上为4096字节）的连续虚拟内存块，，它是内存操作的最小数据单位”。进程的虚拟内存地址空间由多个内存区域组成。每个内存区域包含多个虚拟内存页，注意内存区域可能不连续。</p><p><img src="media/16401440044471/%E6%88%AA%E5%B1%8F2021-12-22%20%E4%B8%8A%E5%8D%8811.52.50.png" alt="截屏2021-12-22 上午11.52.50"></p><p><img src="media/16401440044471/%E6%88%AA%E5%B1%8F2022-01-05%20%E4%B8%8A%E5%8D%8812.47.29.png" alt="截屏2022-01-05 上午12.47.29"></p><h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><p>无论代码编写成什么样子，最终都会被翻译成0和1。在虚拟内存地址中定位目标值，就像在段落中搜索字符串模式一样简单。</p><p>在我们的示例中，内存中有一个匹配模式，从第 11 个数字“0”开始，到第 16 个数字“1”结束。<br>在实际情况下，将二进制视为十六进制更容易。所以一段内存应该是这样的：</p><p><img src="media/16401440044471/ba947175f1fe880ca1204210af0e0e0edd7ed733.png" alt="ba947175f1fe880ca1204210af0e0e0edd7ed733"></p><p>Oxfeedface可以看作是一个Mach-O文件开始的标记<br>请注意，像“0xfeedface”这样的每个块占用 4 个字节（因为 0xfe = 11111110 = 8 位 = 1 个字节），所以它就像：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Address</span>    : <span class="type">Byte</span></span><br><span class="line"><span class="number">0x02cb2000</span> : <span class="number">0xfe</span></span><br><span class="line"><span class="number">0x02cb2001</span> : <span class="number">0xed</span></span><br><span class="line"><span class="number">0x02cb2002</span> : <span class="number">0xfa</span></span><br><span class="line"><span class="number">0x02cb2003</span> : <span class="number">0xce</span></span><br><span class="line"><span class="number">0x02cb2004</span> : <span class="number">0x00</span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="number">0x02cb200c</span> : <span class="number">0x00</span></span><br><span class="line"><span class="number">0x02cb200d</span> : <span class="number">0x00</span></span><br><span class="line"><span class="number">0x02cb200e</span> : <span class="number">0x00</span></span><br><span class="line"><span class="number">0x02cb200f</span> : <span class="number">0x08</span></span><br></pre></td></tr></table></figure><p>如果我们的目标值是 int targetValue = 21592 == 0x5458，我们可以在地址 0x02cb2009 到 0x02cb200c 的内存段中找到它，对吗？但是，由于指令和其他数据也存储在内存中，因此 0x5458 可能只是指令的一部分，或者是长数的一部分（比如 0x0000545845545f5f。ARM 是小端），它可能不会呈现我们的 int 目标值。这种情况发生在我们的大多数内存搜索中，即可以找到多个匹配项。如果是这种情况，我们必须再次搜索更具体的值（我们稍后将在示例中对此进行研究）。现在我们知道“内存搜索”是什么意思了</p><p>了解了这些信息，尝试将内存编辑器建模：<br>功能如下：</p><ol><li>通过枚举所有虚拟内存区域，获取目标进程的虚拟内存地址空间；（这里要解决非越狱下不注入的情况下如何获取其他进程）</li><li>在地址空间中搜索我们需要的目标值，并且获得可能的目标值；</li><li>修改目标值；</li></ol><h3 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h3><p>内存相关处理的函数 mach_vm <a href="https://opensource.apple.com/source/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c">文档</a> $参数$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">mach_vm_read</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_map_t</span>                 <span class="built_in">map</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_vm_address_t</span>        addr,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_vm_size_t</span>           size,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">pointer_t</span>                *data,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_msg_type_number_t</span>   *data_size)</span></span></span><br></pre></td></tr></table></figure><p>描述：从一个地址空间读取/复制一个范围并将其返回给调用者。$map$是要读取其内存的任务的端口；$addr$是开始读取的地址；$size$是要读取的字节数；$data$是用于存储读取字节的缓冲区；$data_size$在输入时，是指向缓冲区最大大小的指针；在输出上，指向读取的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">mach_vm_write</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_map_t</span>                         <span class="built_in">map</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_vm_address_t</span>                address,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">pointer_t</span>                        data,</span></span></span><br><span class="line"><span class="params"><span class="function">        __unused <span class="keyword">mach_msg_type_number_t</span>  size)</span></span>;</span><br></pre></td></tr></table></figure><p>描述：将数据写入目标任务地址空间中的指定地址。$map$是要写入其内存的任务的端口；$address$是开始写入的地址；$data$是要写入的缓冲区；$size$是 的大小$data$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">mach_vm_region</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_map_t</span>                <span class="built_in">map</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_vm_offset_t</span>        *address,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_vm_size_t</span>          *size,                </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_region_flavor_t</span>      flavor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_region_info_t</span>        info,                </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_msg_type_number_t</span>  *count,        </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_port_t</span>             *object_name)</span></span>;</span><br></pre></td></tr></table></figure><p>描述：返回虚拟内存区域的描述。$map$是地址空间包含区域的任务的端口；$addr$在输入时，是开始寻找区域的地址；输出时，返回实际使用的起始地址；$size$输出是定位区域中的字节数；$flavor$是要返回的信息类型，应该是VM_REGION_BASIC_INFO；$info$返回区域信息，vm_region_basic_info_data_64_t在 32 位和 64 位操作系统上都应该是类型；$count$在输入时，应该是VM_REGION_BASIC_INFO_COUNT_64；在输出时，区域的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">memmem</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *big, <span class="keyword">size_t</span> big_len, <span class="keyword">const</span> <span class="keyword">void</span> *little, <span class="keyword">size_t</span> little_len)</span></span>;</span><br></pre></td></tr></table></figure><p>描述：定位字节串$little$中第一次出现的字节串$big$。如果匹配，$little$则返回指向第一次出现的第一个字符的指针；否则它返回NULL。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>终端编译代码：<br>gcc main.m -o hello -ObjC -framework Foundation</p><hr><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><h4 id="reios论坛"><a href="#reios论坛" class="headerlink" title="reios论坛"></a><a href="http://bbs.iosre.com/t/write-a-simple-universal-memory-editor-game-trainer-on-osx-ios-from-scratch/115">reios论坛</a></h4><h4 id="DLGMemor-master"><a href="#DLGMemor-master" class="headerlink" title="DLGMemor-master"></a><a href="https://bbs.pediy.com/thread-226281.htm">DLGMemor-master</a></h4><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向开发（一）修改进程内存&quot;&gt;&lt;a href=&quot;#逆向开发（一）修改进程内存&quot; class=&quot;headerlink&quot; title=&quot;逆向开发（一）修改进程内存&quot;&gt;&lt;/a&gt;逆向开发（一）修改进程内存&lt;/h1&gt;&lt;h3 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot;</summary>
      
    
    
    
    
    <category term="reios" scheme="https://ethan0616.github.io/Ethan0616.github.io/tags/reios/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ethan0616.github.io/Ethan0616.github.io/2022/01/29/hello-world/"/>
    <id>https://ethan0616.github.io/Ethan0616.github.io/2022/01/29/hello-world/</id>
    <published>2022-01-29T13:26:28.528Z</published>
    <updated>2022-01-29T13:26:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
